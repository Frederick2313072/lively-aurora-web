<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home | Résumé Hugo Theme</title><link>https://frederick2313072.github.io/lively-aurora-web/</link><atom:link href="https://frederick2313072.github.io/lively-aurora-web/index.xml" rel="self" type="application/rss+xml"/><description>Home</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 24 Oct 2023 00:00:00 +0000</lastBuildDate><image><url>https://frederick2313072.github.io/lively-aurora-web/media/icon_hu_982c5d63a71b2961.png</url><title>Home</title><link>https://frederick2313072.github.io/lively-aurora-web/</link></image><item><title>PeerPortal - 去中介化留学双边信息平台</title><link>https://frederick2313072.github.io/lively-aurora-web/project/peerportal/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://frederick2313072.github.io/lively-aurora-web/project/peerportal/</guid><description>&lt;h2 id="项目描述"&gt;项目描述&lt;/h2&gt;
&lt;p&gt;一个集成了智能对话、实时消息、论坛交流、文件管理和精准匹配的去中介化留学双边信息平台。项目采用现代化全栈架构，为申请者和引路人提供全方位、个性化的留学申请指导服务，打破传统信息壁垒。&lt;/p&gt;
&lt;h2 id="技术架构"&gt;技术架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端&lt;/strong&gt;：基于 Next.js 15 + React 19 + TypeScript 构建现代化SPA，采用 Tailwind CSS + Radix UI 组件库实现响应式设计，使用 Zustand 进行状态管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端&lt;/strong&gt;：采用 FastAPI + Python 构建高性能异步API服务，集成 Supabase(PostgreSQL) 作为主数据库，支持 WebSocket 实时通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础设施&lt;/strong&gt;：Docker 容器化部署，支持文件上传存储、用户认证、数据库优化等企业级功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="个人贡献"&gt;个人贡献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全栈系统架构设计&lt;/strong&gt;：独立负责整个系统的前后端架构设计，构建了包含用户管理、论坛系统、实时消息、文件上传、智能匹配等9个核心业务模块的完整平台&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端开发&lt;/strong&gt;：使用 Next.js 15 App Router 构建现代化前端应用，实现了用户认证、个人资料管理、论坛交流、实时聊天等核心功能页面，组件复用率达到60%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端API开发&lt;/strong&gt;：基于 FastAPI 构建了包含50+个API端点的完整RESTful服务，涵盖用户管理、论坛CRUD、消息系统、文件上传等核心功能，API响应时间控制在100ms以内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库设计与优化&lt;/strong&gt;：设计了包含21个数据表的完整数据库架构，优化了复杂查询性能，通过索引策略和查询优化将数据库响应时间提升30%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时通信系统&lt;/strong&gt;：基于 WebSocket 实现了导师-学生一对一实时聊天功能，支持消息状态管理、在线状态显示，消息延迟控制在50ms以内&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="项目挑战与解决方案"&gt;项目挑战与解决方案&lt;/h2&gt;
&lt;h3 id="挑战复杂权限系统设计"&gt;挑战：复杂权限系统设计&lt;/h3&gt;
&lt;p&gt;如何设计一个支持多种用户角色（学生、导师、管理员）的复杂权限系统，确保数据安全和用户隐私。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：基于JWT实现无状态认证，设计了角色-权限-资源的三层权限模型，通过中间件实现细粒度的API权限控制，确保不同角色只能访问相应的数据和功能。&lt;/p&gt;
&lt;h3 id="挑战高并发实时消息系统"&gt;挑战：高并发实时消息系统&lt;/h3&gt;
&lt;p&gt;如何在高并发场景下保证实时消息系统的稳定性和性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：采用异步编程模式，实现了连接池管理和消息队列机制，通过负载均衡和连接复用，支持1000+并发连接，消息投递成功率达99.9%。&lt;/p&gt;</description></item><item><title>AI学生费曼学习系统</title><link>https://frederick2313072.github.io/lively-aurora-web/project/feiman-agent/</link><pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate><guid>https://frederick2313072.github.io/lively-aurora-web/project/feiman-agent/</guid><description>&lt;h2 id="项目描述"&gt;项目描述&lt;/h2&gt;
&lt;p&gt;一个基于&amp;quot;费曼学习法&amp;quot;理念设计的AI智能体。它不直接给出答案，而是通过&amp;quot;解释、简化、比喻、追问&amp;quot;等方式，模拟一位&amp;quot;AI学生&amp;quot;与用户一同学习。项目旨在验证状态化AI Agent在复杂、长程交互学习场景下的应用潜力。&lt;/p&gt;
&lt;h2 id="技术架构"&gt;技术架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端&lt;/strong&gt;：采用 React 负责前端开发，使用 MUI 构建了美观、响应式的用户界面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态管理&lt;/strong&gt;：使用 Zustand 进行轻量级的全局状态管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI Agent&lt;/strong&gt;：基于 LangChain 设计并实现了支持长程记忆的 ReAct Agent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时通信&lt;/strong&gt;：利用 WebSocket 实现Agent思考过程的实时流式输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="个人贡献"&gt;个人贡献&lt;/h2&gt;
&lt;h3 id="前端架构与开发"&gt;前端架构与开发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 MUI 构建了美观、响应式的用户界面&lt;/li&gt;
&lt;li&gt;通过提取可复用的UI组件，将组件复用率提升至40%&lt;/li&gt;
&lt;li&gt;使用 Zustand 进行轻量级的全局状态管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="状态化agent后端"&gt;状态化Agent后端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于 LangChain 设计并实现了支持长程记忆的 ReAct Agent&lt;/li&gt;
&lt;li&gt;通过封装 AgentExecutor 与 RunnableWithMessageHistory，确保了多轮交互中会话状态的一致性与持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="实时交互接口"&gt;实时交互接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;负责后端整体架构，利用 WebSocket 实现Agent思考过程的实时流式输出&lt;/li&gt;
&lt;li&gt;将首个词响应时间 (TTFT) 控制在 500ms 以内，显著提升了用户交互体验&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="项目挑战与解决方案"&gt;项目挑战与解决方案&lt;/h2&gt;
&lt;h3 id="挑战多用户状态管理"&gt;挑战：多用户状态管理&lt;/h3&gt;
&lt;p&gt;如何在 WebSocket 通信中，轻量级地管理和隔离多用户的会话状态与长期记忆，避免高并发下的内存溢出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：为每个WebSocket连接创建独立的 AgentExecutor 实例，并动态注入基于用户ID的会话历史。相比为每个用户维持独立进程的方式，内存占用减少了20%，实现了高效、低延迟的多用户状态管理。&lt;/p&gt;
&lt;h2 id="技术收获"&gt;技术收获&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;掌握了 LangChain 中 AgentExecutor 与 Runnable协议 在构建复杂AI Agent中的应用&lt;/li&gt;
&lt;li&gt;熟悉了 WebSocket 实时通信与 RESTful 请求响应在AI应用中的混合应用场景与最佳实践&lt;/li&gt;
&lt;li&gt;深入理解了AI Agent的状态管理和长程记忆机制&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>NKUWiki 知识图谱构建 (LLM驱动校园问答应用)</title><link>https://frederick2313072.github.io/lively-aurora-web/project/nkuwiki/</link><pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate><guid>https://frederick2313072.github.io/lively-aurora-web/project/nkuwiki/</guid><description>&lt;h2 id="项目描述"&gt;项目描述&lt;/h2&gt;
&lt;p&gt;一个基于RAG检索增强生成的南开大学校园知识共享平台，采用&amp;quot;开源·共治·普惠&amp;quot;理念构建南开知识共同体。项目处理数据量10GB+，覆盖小红书、知乎、校园集市3000+帖子，数据清洗准确率96%，结构化处理效率提升60%。&lt;/p&gt;
&lt;h2 id="技术成果"&gt;技术成果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于LangChain优化RAG问答，构建50万+token知识库&lt;/li&gt;
&lt;li&gt;HuggingFace嵌入模型检索召回率91%&lt;/li&gt;
&lt;li&gt;问答响应时间优化至1.2s，准确率达到82%&lt;/li&gt;
&lt;li&gt;爬虫稳定运行率达99.5%，单日数据采集量突破10万条&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="个人贡献"&gt;个人贡献&lt;/h2&gt;
&lt;h3 id="多路爬虫系统架构设计"&gt;多路爬虫系统架构设计&lt;/h3&gt;
&lt;p&gt;独立设计并实现了支持异构数据源的分布式爬虫系统，采用Playwright + Selenium双引擎混合架构，覆盖现代SPA与传统网页场景，Playwright处理复杂DOM性能提升40%。&lt;/p&gt;
&lt;h3 id="逆向工程与反反爬技术"&gt;逆向工程与反反爬技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;针对小红书、知乎、校园集市等平台实施深度逆向分析&lt;/li&gt;
&lt;li&gt;破解API签名算法（HMAC-MD5、时间戳验证）&lt;/li&gt;
&lt;li&gt;设计JavaScript反检测脚本，覆盖WebDriver隐藏、浏览器指纹伪造、Canvas指纹混淆等30+检测点&lt;/li&gt;
&lt;li&gt;成功绕过Cloudflare、阿里云盾等WAF防护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="安全防护与对抗策略"&gt;安全防护与对抗策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实现动态User-Agent轮换、IP代理池管理、请求频率控制等反反爬机制&lt;/li&gt;
&lt;li&gt;通过Browserless集群实现浏览器指纹混淆&lt;/li&gt;
&lt;li&gt;设计Cookie管理与会话保持策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="etl数据处理管道"&gt;ETL数据处理管道&lt;/h3&gt;
&lt;p&gt;设计异步数据处理流程，集成Qdrant向量数据库、Elasticsearch全文索引、MySQL关系存储，实现增量数据同步与索引构建，数据处理延迟控制在100ms以内。&lt;/p&gt;
&lt;h2 id="核心技术突破"&gt;核心技术突破&lt;/h2&gt;
&lt;h3 id="校园集市api逆向"&gt;校园集市API逆向&lt;/h3&gt;
&lt;p&gt;通过流量分析发现X-Sc-Ah签名机制，逆向JavaScript加密算法，实现动态签名生成（university_m_td_secret_key的MD5哈希），突破API访问限制，数据获取成功率提升至95%。&lt;/p&gt;
&lt;h3 id="知乎反爬对抗"&gt;知乎反爬对抗&lt;/h3&gt;
&lt;p&gt;分析z_c0 cookie认证机制，实现基于时间戳的动态请求头构造，通过WebGL渲染器信息伪造、音频上下文混淆等技术绕过浏览器指纹检测。&lt;/p&gt;
&lt;h3 id="小红书数据采集"&gt;小红书数据采集&lt;/h3&gt;
&lt;p&gt;破解小红书搜索API的参数加密，实现批量内容抓取，通过请求去重与异常重试机制保证数据完整性。&lt;/p&gt;
&lt;h3 id="安全合规设计"&gt;安全合规设计&lt;/h3&gt;
&lt;p&gt;遵循robots.txt协议，实现请求频率自适应控制，设计数据脱敏与隐私保护机制，确保合规采集。&lt;/p&gt;</description></item></channel></rss>